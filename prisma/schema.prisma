// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ROOT
  ADMIN
  USER
}

enum Reaction {
  UP_VOTE
  DOWN_VOTE
  NONE
}

model User {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  username String @unique
  password String
  phone    String @unique @db.VarChar(12)
  role     Role   @default(USER)

  // Relations
  wishlist        Tracked[]
  surveyResponse  SurveyResponse[]
  reviews         Review[]
  reviewReactions ReviewReaction[]
  comments        Comment[]
  ratings         Rating[]
}

model Vendor {
  id             Int             @id @default(autoincrement())
  name           String          @unique
  locations      String[]
  productDetails ProductDetail[]
}

model Product {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  details String?
  image   String?

  // Relations
  survey         Survey[]
  productDetails ProductDetail[]
  ratings        Rating[]
  Tracked        Tracked?        @relation(fields: [trackedUserId], references: [userId])
  trackedUserId  Int?
}

model ProductDetail {
  id        Int      @id @default(autoincrement())
  price     Float
  stockOpts Int
  discount  Float
  reviews   Review[]

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  vendor    Vendor  @relation(fields: [vendorId], references: [id])
  vendorId  Int
}

model Review {
  id              Int              @id @default(autoincrement())
  picture         String?
  text            String           @db.VarChar(255)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  reviewReactions ReviewReaction[]

  // Relations
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  productDetail   ProductDetail @relation(fields: [productDetailId], references: [id])
  productDetailId Int
  comments        Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  vote      Reaction @default(NONE)
  // Relations
  Review    Review   @relation(fields: [reviewId], references: [id])
  reviewId  Int
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
}

model ReviewReaction {
  vote Reaction @default(NONE)

  review   Review @relation(fields: [reviewId], references: [id])
  reviewId Int
  user     User   @relation(fields: [userId], references: [id])
  userId   Int

  @@unique([userId, reviewId])
}

model Tracked {
  products Product[]
  user     User      @relation(fields: [userId], references: [id])
  userId   Int

  @@unique([userId])
}

model Rating {
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  rating    Float   @default(3.0)

  @@unique([userId, productId])
}

model Survey {
  id        Int              @id @default(autoincrement())
  question  String
  responses SurveyResponse[]

  // Relations
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model SurveyResponse {
  id         Int    @id @default(autoincrement())
  // Relations
  user       User   @relation(fields: [userId], references: [id])
  userId     Int
  question   Survey @relation(fields: [questionId], references: [id])
  questionId Int
}
